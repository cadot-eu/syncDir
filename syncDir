#!/bin/bash

#############################################
# syncDir - Synchronisation SSH avec chiffrement OpenSSL AES
# Compatible Android sans installation serveur
#############################################

LOCAL_USER=$(whoami)
LOCAL_BASE="/home/${LOCAL_USER}"
CONFIG_FILE="${LOCAL_BASE}/.syncdir.conf"
LOCK_DIR="/tmp/syncDir_locks"
LOG_DIR="${LOCAL_BASE}/.local/log/syncDir"

if [ -t 1 ]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    NC='\033[0m'
else
    RED=''; GREEN=''; YELLOW=''; NC=''
fi

log_info() {
    echo -e "${GREEN}[INFO]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
    [ -d "$LOG_DIR" ] && echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_DIR/syncDir.log"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1" >&2
    [ -d "$LOG_DIR" ] && echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_DIR/syncDir.log"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
    [ -d "$LOG_DIR" ] && echo "[WARN] $(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_DIR/syncDir.log"
}

mkdir -p "$LOCK_DIR" "$LOG_DIR" 2>/dev/null

show_help() {
    cat << 'HELP'
syncDir - Synchronisation SSH avec chiffrement AES
===================================================

USAGE:
    syncDir <repertoire> [--maitre|--reset|--deleteDistant] [--user <username>]
    syncDir --deleteDistant
    syncDir --help

DESCRIPTION:
    Synchronise répertoire local avec serveur distant
    - Chiffrement: OpenSSL AES-256-CBC (compatible Android)
    - Synchronisation: rsync (incrémentale)
    - Serveur: stocke fichiers chiffrés (.enc)
    - Aucune installation requise sur serveur

OPTIONS:
    --maitre        LOCAL → DISTANT uniquement (écrase distant)
    --reset         Efface distant et resynchronise
    --deleteDistant Supprime TOUT (utilisateur + données)
    --user <nom>    Synchronise avec autre utilisateur (ex: emeline)
    --password <pw> Mot de passe de chiffrement personnalisé

EXEMPLES:
    syncDir domo
    syncDir domo --maitre
    syncDir domo --reset
    syncDir --deleteDistant
    syncDir Documents --user emeline
    syncDir justificatifs --user emeline --password Hy6g86EIwqVvSv

HELP
}

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    show_help
    exit 0
fi

IS_MASTER=false
IS_RESET=false
IS_DELETE_DISTANT=false
SYNC_AS_USER=""
CUSTOM_PASSWORD=""
DIR_NAME=""

if [ "$1" == "--deleteDistant" ]; then
    IS_DELETE_DISTANT=true
    DIR_NAME="__all__"
else
    if [ $# -lt 1 ]; then
        log_error "Usage: syncDir <repertoire> [options]"
        exit 1
    fi
    DIR_NAME="$1"
    shift
    while [ $# -gt 0 ]; do
        case "$1" in
            maitre|--maitre) IS_MASTER=true; shift ;;
            reset|--reset) IS_RESET=true; shift ;;
            deleteDistant|--deleteDistant) IS_DELETE_DISTANT=true; shift ;;
            --user) SYNC_AS_USER="$2"; shift 2 ;;
            --password) CUSTOM_PASSWORD="$2"; shift 2 ;;
            *) log_error "Option invalide: $1"; exit 1 ;;
        esac
    done
fi

create_config() {
    echo "Configuration syncDir"
    echo "===================="
    read -p "Serveur distant : " remote_host
    read -p "Utilisateur root [root] : " remote_root
    remote_root=${remote_root:-root}
    read -p "Base distante [/home] : " remote_base
    remote_base=${remote_base:-/home}
    echo ""
    read -sp "Mot de passe chiffrement : " crypt_password
    echo ""
    read -sp "Confirmez : " crypt_password2
    echo ""
    
    if [ "$crypt_password" != "$crypt_password2" ]; then
        echo "Erreur: mots de passe différents"
        exit 1
    fi
    
    cat > "$CONFIG_FILE" <<EOF
REMOTE_HOST="$remote_host"
REMOTE_ROOT="$remote_root"
REMOTE_BASE="$remote_base"
CRYPT_PASSWORD="$crypt_password"
EOF
    chmod 600 "$CONFIG_FILE"
    log_info "Configuration sauvegardée"
}

if [ ! -f "$CONFIG_FILE" ]; then
    create_config
fi

source "$CONFIG_FILE"

# Utiliser mot de passe personnalisé si fourni
if [ -n "$CUSTOM_PASSWORD" ]; then
    CRYPT_PASSWORD="$CUSTOM_PASSWORD"
    log_info "Utilisation mot de passe personnalisé"
fi

if [ "$DIR_NAME" = "__all__" ]; then
    LOCAL_DIR=""
    DIR_NAME_SAFE="__deleteall__"
    LOCK_FILE="${LOCK_DIR}/${DIR_NAME_SAFE}.lock"
else
    LOCAL_DIR="${LOCAL_BASE}/${DIR_NAME}"
    DIR_NAME_SAFE="${DIR_NAME//\//_}"
    LOCK_FILE="${LOCK_DIR}/${DIR_NAME_SAFE}.lock"
    if [ ! -d "$LOCAL_DIR" ]; then
        log_info "Création du répertoire local: $LOCAL_DIR"
        mkdir -p "$LOCAL_DIR"
        if [ $? -ne 0 ]; then
            log_error "Impossible de créer le répertoire: $LOCAL_DIR"
            exit 1
        fi
    fi
fi

# Utilisateur dédié par répertoire
if [ -n "$SYNC_AS_USER" ]; then
    REMOTE_USER="${SYNC_AS_USER}Sync_${DIR_NAME//\//_}"
else
    REMOTE_USER="${LOCAL_USER}Sync_${DIR_NAME//\//_}"
fi

if ! ssh -o ConnectTimeout=10 -o BatchMode=yes "${REMOTE_ROOT}@${REMOTE_HOST}" "echo ok" &>/dev/null; then
    log_error "Connexion serveur impossible"
    exit 1
fi

if [ -f "$LOCK_FILE" ]; then
    pid=$(cat "$LOCK_FILE")
    if kill -0 "$pid" 2>/dev/null; then
        log_warn "Sync en cours (PID: $pid)"
        exit 0
    fi
    rm -f "$LOCK_FILE"
fi

echo $$ > "$LOCK_FILE"
trap "rm -f $LOCK_FILE" EXIT

# Clé SSH dédiée par répertoire
SSH_KEY_DIR="${LOCAL_BASE}/.ssh/syncdir"
SSH_KEY_FILE="${SSH_KEY_DIR}/id_rsa_${DIR_NAME//\//_}"

mkdir -p "$SSH_KEY_DIR"

if [ ! -f "$SSH_KEY_FILE" ]; then
    log_info "Génération clé SSH dédiée pour ${DIR_NAME}..."
    ssh-keygen -t rsa -b 4096 -f "$SSH_KEY_FILE" -N "" -C "${LOCAL_USER}@${DIR_NAME}"
fi

if ! ssh "${REMOTE_ROOT}@${REMOTE_HOST}" "id ${REMOTE_USER} &>/dev/null"; then
    log_info "Création ${REMOTE_USER}..."
    ssh "${REMOTE_ROOT}@${REMOTE_HOST}" bash <<EOFREMOTE
sudo useradd -m -s /bin/bash ${REMOTE_USER}
sudo mkdir -p /home/${REMOTE_USER}/.ssh
sudo chmod 700 /home/${REMOTE_USER}/.ssh
sudo chown -R ${REMOTE_USER}:${REMOTE_USER} /home/${REMOTE_USER}
EOFREMOTE
    [ $? -eq 0 ] && log_info "Utilisateur ${REMOTE_USER} créé"
fi

if [ -f "${SSH_KEY_FILE}.pub" ]; then
    ssh_key_content=$(cat "${SSH_KEY_FILE}.pub")
    key_exists=$(ssh "${REMOTE_ROOT}@${REMOTE_HOST}" \
        "sudo grep -F '${ssh_key_content}' /home/${REMOTE_USER}/.ssh/authorized_keys 2>/dev/null || echo ''")
    
    if [ -z "$key_exists" ]; then
        log_info "Installation clé SSH pour ${REMOTE_USER}..."
        cat "${SSH_KEY_FILE}.pub" | ssh "${REMOTE_ROOT}@${REMOTE_HOST}" \
            "sudo mkdir -p /home/${REMOTE_USER}/.ssh && \
             sudo tee -a /home/${REMOTE_USER}/.ssh/authorized_keys > /dev/null && \
             sudo chmod 700 /home/${REMOTE_USER}/.ssh && \
             sudo chmod 600 /home/${REMOTE_USER}/.ssh/authorized_keys && \
             sudo chown -R ${REMOTE_USER}:${REMOTE_USER} /home/${REMOTE_USER}/.ssh"
        [ $? -eq 0 ] && log_info "Clé SSH installée"
    else
        log_info "Clé SSH déjà présente"
    fi
fi

if [ "$IS_DELETE_DISTANT" = true ]; then
    if [ "$DIR_NAME" = "__all__" ]; then
        # Supprimer TOUS les utilisateurs ${LOCAL_USER}Sync_*
        log_warn "========================================"
        log_warn "ATTENTION: Suppression de TOUS les utilisateurs!"
        log_warn "Tous les utilisateurs (${LOCAL_USER}Sync_*)"
        log_warn "========================================"
        echo ""
        read -p "Confirmez la suppression complète (tapez 'OUI' en majuscules): " confirmation
        
        if [ "$confirmation" != "OUI" ]; then
            log_info "Suppression annulée"
            exit 0
        fi
        
        log_warn "Suppression en cours..."
        
        ssh "${REMOTE_ROOT}@${REMOTE_HOST}" bash <<EOFDELETE
set -e
LOCAL_USER="${LOCAL_USER}"

echo "Recherche des utilisateurs (\${LOCAL_USER}Sync_*)..."
for share_user in \$(getent passwd | grep "^\${LOCAL_USER}Sync_" | cut -d: -f1); do
    echo "Suppression utilisateur: \$share_user"
    sudo userdel -r "\$share_user" 2>/dev/null || true
    sudo rm -rf "/home/\$share_user" 2>/dev/null || true
done

echo "Suppression terminée"
EOFDELETE
        
        log_info "Tous les utilisateurs (${LOCAL_USER}Sync_*) ont été supprimés"
        log_info "Opération terminée avec succès"
    else
        # Supprimer un utilisateur spécifique
        log_warn "========================================"
        log_warn "ATTENTION: Suppression de l'utilisateur!"
        log_warn "Utilisateur: ${REMOTE_USER}"
        log_warn "Répertoire: /home/${REMOTE_USER}/"
        log_warn "========================================"
        echo ""
        read -p "Confirmez la suppression (tapez 'OUI' en majuscules): " confirmation
        
        if [ "$confirmation" != "OUI" ]; then
            log_info "Suppression annulée"
            exit 0
        fi
        
        log_warn "Suppression en cours..."
        
        ssh "${REMOTE_ROOT}@${REMOTE_HOST}" bash <<EOFDELETE
set -e
REMOTE_USER="${REMOTE_USER}"

if id "\${REMOTE_USER}" &>/dev/null; then
    sudo userdel -r "\${REMOTE_USER}" 2>/dev/null || true
    sudo rm -rf "/home/\${REMOTE_USER}" 2>/dev/null || true
    echo "Utilisateur \${REMOTE_USER} supprimé"
else
    echo "Utilisateur \${REMOTE_USER} n'existe pas"
fi
EOFDELETE
        
        log_info "L'utilisateur ${REMOTE_USER} a été supprimé"
        log_info "Opération terminée avec succès"
    fi
    exit 0
fi

# Le répertoire distant est directement dans le home de l'utilisateur dédié
remote_encrypted="/home/${REMOTE_USER}/${DIR_NAME}"
local_encrypted="${LOCAL_DIR}/.encrypted_cache"

mkdir -p "$local_encrypted"

# Créer le répertoire distant avec la clé dédiée
ssh -i "$SSH_KEY_FILE" "${REMOTE_USER}@${REMOTE_HOST}" "mkdir -p ${remote_encrypted}" 2>/dev/null || \
    ssh "${REMOTE_ROOT}@${REMOTE_HOST}" "sudo mkdir -p ${remote_encrypted} && sudo chown -R ${REMOTE_USER}:${REMOTE_USER} ${remote_encrypted}"

if [ "$IS_RESET" = true ]; then
    log_warn "Reset distant"
    ssh "${REMOTE_ROOT}@${REMOTE_HOST}" "sudo rm -rf ${remote_encrypted}/*"
    rm -rf "$local_encrypted"/*
fi

log_info "===== Synchronisation: $DIR_NAME ====="

if [ "$IS_MASTER" = true ]; then
    log_info "Mode MAITRE"
    
    log_info "[1/2] Chiffrement AES..."
    find "$LOCAL_DIR" -type f ! -path "*/.encrypted_cache/*" | while read -r file; do
        rel_path="${file#$LOCAL_DIR/}"
        encrypted_file="${local_encrypted}/${rel_path}.enc"
        mkdir -p "$(dirname "$encrypted_file")"
        
        if [ ! -f "$encrypted_file" ] || [ "$file" -nt "$encrypted_file" ]; then
            openssl enc -aes-256-cbc -salt -pbkdf2 -in "$file" -out "$encrypted_file" -k "$CRYPT_PASSWORD" 2>/dev/null && \
                log_info "  ✓ $rel_path"
        fi
    done
    
    log_info "[2/2] Upload..."
    rsync -avz --delete -e "ssh -i ${SSH_KEY_FILE}" "${local_encrypted}/" "${REMOTE_USER}@${REMOTE_HOST}:${remote_encrypted}/"
    
else
    log_info "Mode BIDIRECTIONNEL"
    
    log_info "[1/4] Chiffrement local..."
    find "$LOCAL_DIR" -type f ! -path "*/.encrypted_cache/*" | while read -r file; do
        rel_path="${file#$LOCAL_DIR/}"
        encrypted_file="${local_encrypted}/${rel_path}.enc"
        mkdir -p "$(dirname "$encrypted_file")"
        
        if [ ! -f "$encrypted_file" ] || [ "$file" -nt "$encrypted_file" ]; then
            openssl enc -aes-256-cbc -salt -pbkdf2 -in "$file" -out "$encrypted_file" -k "$CRYPT_PASSWORD" 2>/dev/null && \
                log_info "  ✓ $rel_path"
        fi
    done
    
    log_info "[2/4] Download..."
    rsync -avz -e "ssh -i ${SSH_KEY_FILE}" "${REMOTE_USER}@${REMOTE_HOST}:${remote_encrypted}/" "${local_encrypted}/"
    
    log_info "[3/4] Déchiffrement..."
    find "$local_encrypted" -type f -name "*.enc" | while read -r encrypted_file; do
        rel_path="${encrypted_file#$local_encrypted/}"
        rel_path="${rel_path%.enc}"
        decrypted_file="${LOCAL_DIR}/${rel_path}"
        mkdir -p "$(dirname "$decrypted_file")"
        
        if [ ! -f "$decrypted_file" ] || [ "$encrypted_file" -nt "$decrypted_file" ]; then
            openssl enc -aes-256-cbc -d -pbkdf2 -in "$encrypted_file" -out "$decrypted_file" -k "$CRYPT_PASSWORD" 2>/dev/null && \
                log_info "  ✓ $rel_path"
        fi
    done
    
    log_info "[4/4] Upload..."
    rsync -avz -e "ssh -i ${SSH_KEY_FILE}" "${local_encrypted}/" "${REMOTE_USER}@${REMOTE_HOST}:${remote_encrypted}/"
fi

ssh "${REMOTE_ROOT}@${REMOTE_HOST}" "sudo chown -R ${REMOTE_USER}:${REMOTE_USER} ${remote_encrypted}" 2>/dev/null

log_info "===== ✓ Terminé ====="
