#!/bin/bash

#############################################
# syncDir - Script de synchronisation SSH avec chiffrement age
# Usage: syncDir <repertoire> [--maitre|--reset]
#############################################

set -e

LOCAL_USER=$(whoami)
LOCAL_BASE="/home/${LOCAL_USER}"
CONFIG_FILE="${LOCAL_BASE}/.syncdir.conf"
LOCK_DIR="/tmp/syncDir_locks"
LOG_DIR="${LOCAL_BASE}/.local/log/syncDir"

# Couleurs
if [ -t 1 ]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    NC='\033[0m'
else
    RED=''; GREEN=''; YELLOW=''; NC=''
fi

log_info() {
    echo -e "${GREEN}[INFO]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
    [ -d "$LOG_DIR" ] && echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_DIR/syncDir.log"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1" >&2
    [ -d "$LOG_DIR" ] && echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_DIR/syncDir.log"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
    [ -d "$LOG_DIR" ] && echo "[WARN] $(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_DIR/syncDir.log"
}

mkdir -p "$LOCK_DIR" "$LOG_DIR" 2>/dev/null

# Vérifier age
if ! command -v age &>/dev/null; then
    log_error "age n'est pas installé. Installez-le: sudo apt install age"
    exit 1
fi

# Aide
if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ $# -lt 1 ]; then
    cat << 'HELP'
syncDir - Synchronisation SSH avec chiffrement age
===================================================

USAGE:
    syncDir <repertoire> [--maitre|--reset] [--password <motdepasse>]

EXEMPLES:
    syncDir domo                    # Sync bidirectionnelle
    syncDir domo --maitre           # Priorité local
    syncDir domo --reset            # Réinitialiser distant
    syncDir domo --password secret  # Mot de passe personnalisé

CHIFFREMENT:
    Les fichiers sont chiffrés avec age (extension .age ajoutée)
    Les noms de fichiers restent en clair pour faciliter la navigation
HELP
    exit 0
fi

DIR_NAME="$1"
IS_MASTER=false
IS_RESET=false
CUSTOM_PASSWORD=""

shift
while [ $# -gt 0 ]; do
    case "$1" in
        --maitre|maitre) IS_MASTER=true; shift ;;
        --reset|reset) IS_RESET=true; shift ;;
        --password)
            if [ -z "$2" ]; then
                log_error "Option --password nécessite un mot de passe"
                exit 1
            fi
            CUSTOM_PASSWORD="$2"
            shift 2
            ;;
        *) log_error "Option invalide: $1"; exit 1 ;;
    esac
done

# Configuration
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Configuration initiale"
    read -p "Adresse serveur distant : " remote_host
    read -p "Utilisateur root distant [root] : " remote_root
    remote_root=${remote_root:-root}
    read -p "Répertoire de base distant [/home] : " remote_base
    remote_base=${remote_base:-/home}
    read -sp "Mot de passe de chiffrement : " crypt_password
    echo ""
    read -sp "Confirmez le mot de passe : " crypt_password2
    echo ""
    
    if [ "$crypt_password" != "$crypt_password2" ]; then
        log_error "Les mots de passe ne correspondent pas"
        exit 1
    fi
    
    cat > "$CONFIG_FILE" <<EOF
REMOTE_HOST="$remote_host"
REMOTE_ROOT="$remote_root"
REMOTE_BASE="$remote_base"
CRYPT_PASSWORD="$crypt_password"
EOF
    chmod 600 "$CONFIG_FILE"
    log_info "Configuration sauvegardée dans $CONFIG_FILE"
fi

source "$CONFIG_FILE"

# Utiliser mot de passe personnalisé si fourni
if [ -n "$CUSTOM_PASSWORD" ]; then
    CRYPT_PASSWORD="$CUSTOM_PASSWORD"
fi

REMOTE_USER="${LOCAL_USER}Sync"
LOCAL_DIR="${LOCAL_BASE}/${DIR_NAME}"
REMOTE_DIR="${REMOTE_BASE}/${REMOTE_USER}/encrypted/${DIR_NAME}"

if [ ! -d "$LOCAL_DIR" ]; then
    log_error "Le répertoire local n'existe pas: $LOCAL_DIR"
    exit 1
fi

# Créer utilisateur distant si nécessaire
log_info "Vérification utilisateur distant: ${REMOTE_USER}"
if ! ssh "${REMOTE_ROOT}@${REMOTE_HOST}" "id ${REMOTE_USER} &>/dev/null"; then
    log_info "Création de l'utilisateur distant: ${REMOTE_USER}"
    ssh "${REMOTE_ROOT}@${REMOTE_HOST}" bash <<EOFREMOTE
sudo useradd -m -s /bin/bash ${REMOTE_USER}
sudo mkdir -p /home/${REMOTE_USER}/.ssh
sudo chmod 700 /home/${REMOTE_USER}/.ssh
sudo mkdir -p /home/${REMOTE_USER}/encrypted
sudo chown -R ${REMOTE_USER}:${REMOTE_USER} /home/${REMOTE_USER}
EOFREMOTE
    
    # Copier clé SSH
    if [ -f "${LOCAL_BASE}/.ssh/id_rsa.pub" ]; then
        cat "${LOCAL_BASE}/.ssh/id_rsa.pub" | ssh "${REMOTE_ROOT}@${REMOTE_HOST}" \
            "sudo tee -a /home/${REMOTE_USER}/.ssh/authorized_keys > /dev/null && \
             sudo chmod 600 /home/${REMOTE_USER}/.ssh/authorized_keys && \
             sudo chown ${REMOTE_USER}:${REMOTE_USER} /home/${REMOTE_USER}/.ssh/authorized_keys"
    fi
fi

# Reset si demandé
if [ "$IS_RESET" = true ]; then
    log_warn "Effacement du répertoire distant: $REMOTE_DIR"
    ssh "${REMOTE_ROOT}@${REMOTE_HOST}" "sudo rm -rf ${REMOTE_DIR} && sudo mkdir -p ${REMOTE_DIR} && sudo chown -R ${REMOTE_USER}:${REMOTE_USER} ${REMOTE_DIR}"
fi

# Synchronisation avec chiffrement age
log_info "Synchronisation de $LOCAL_DIR → $REMOTE_DIR"

# Créer répertoire temporaire pour fichiers chiffrés
TMP_ENCRYPTED=$(mktemp -d)
trap "rm -rf $TMP_ENCRYPTED" EXIT

# Chiffrer tous les fichiers
log_info "Chiffrement des fichiers avec age..."
find "$LOCAL_DIR" -type f | while read -r file; do
    rel_path="${file#$LOCAL_DIR/}"
    encrypted_file="$TMP_ENCRYPTED/$rel_path.age"
    mkdir -p "$(dirname "$encrypted_file")"
    echo "$CRYPT_PASSWORD" | age -p -a -o "$encrypted_file" "$file" 2>/dev/null
done

# Copier structure de répertoires
find "$LOCAL_DIR" -type d | while read -r dir; do
    rel_path="${dir#$LOCAL_DIR}"
    [ -z "$rel_path" ] && continue
    mkdir -p "$TMP_ENCRYPTED$rel_path"
done

# Synchroniser via rsync
log_info "Transfert SSH vers le serveur..."
rsync -avz --delete "$TMP_ENCRYPTED/" "${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/"

# Corriger permissions
ssh "${REMOTE_ROOT}@${REMOTE_HOST}" "sudo chown -R ${REMOTE_USER}:${REMOTE_USER} ${REMOTE_DIR}"

log_info "Synchronisation terminée avec succès!"
